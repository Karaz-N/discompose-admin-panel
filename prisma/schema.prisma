generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["fullTextSearch"]
}

datasource db {
    provider = "postgres"
    url      = env("DATABASE_URL")
}

model DocumentData {
    id           String           @id
    type         DocumentCategory
    imageId      String?
    manuscriptId String?
    printId      String?
    images       Image?           @relation(fields: [imageId], references: [id], onDelete: Cascade)
    manuscripts  Manuscript?      @relation(fields: [manuscriptId], references: [id], onDelete: Cascade)
    prints       Print?           @relation(fields: [printId], references: [id], onDelete: Cascade)
}

model Event {
    id          String       @id
    year        Int?
    type        EventType
    placeId     String
    places      Place        @relation(fields: [placeId], references: [id])
    images      Image[]
    manuscripts Manuscript[]
    prints      Print[]

    @@unique([year, type, placeId])
    @@map("events")
}

model Image {
    id           String         @id
    artist       String?
    author       String?
    title        String?
    museum       String?
    content      String?
    date         String?
    summary      String?
    link         String?
    eventId      String?
    placeId      String?
    DocumentData DocumentData[]
    events       Event?         @relation(fields: [eventId], references: [id])
    places       Place?         @relation(fields: [placeId], references: [id])

    @@map("images")
}

model Manuscript {
    id                                     String         @id
    author                                 String?
    recipient                              String?
    language                               String?
    summary                                String?
    link                                   String?
    archive                                String?
    writtenAt                              String?
    receivedAt                             String?
    fromPlaceId                            String?
    toPlaceId                              String?
    eventId                                String?
    DocumentData                           DocumentData[]
    events                                 Event?         @relation(fields: [eventId], references: [id])
    places_manuscripts_fromPlaceIdToplaces Place?         @relation("manuscripts_fromPlaceIdToplaces", fields: [fromPlaceId], references: [id])
    places_manuscripts_toPlaceIdToplaces   Place?         @relation("manuscripts_toPlaceIdToplaces", fields: [toPlaceId], references: [id])

    @@map("manuscripts")
}

model Place {
    id                                          String       @id(map: "Place_pkey")
    name                                        String       @unique(map: "Place_name_key")
    latitude                                    Float?
    longitude                                   Float?
    countryCode                                 String?
    events                                      Event[]
    images                                      Image[]
    manuscripts_manuscripts_fromPlaceIdToplaces Manuscript[] @relation("manuscripts_fromPlaceIdToplaces")
    manuscripts_manuscripts_toPlaceIdToplaces   Manuscript[] @relation("manuscripts_toPlaceIdToplaces")
    prints                                      Print[]

    @@map("places")
}

model Print {
    id           String         @id
    language     String?
    title        String?
    year         String?
    notes        String?
    USTC         String?
    writer       String?
    information  String?
    dedicatee    String?
    summary      String?
    author       String?
    link         String?
    eventId      String?
    placeId      String?
    otherPlaces  String[]
    DocumentData DocumentData[]
    events       Event?         @relation(fields: [eventId], references: [id])
    places       Place?         @relation(fields: [placeId], references: [id])

    @@map("prints")
}

model Session {
    id        String   @id
    createdAt DateTime @default(now())
    updatedAt DateTime
    duration  Int      @default(7200)
    userId    String
    users     User     @relation(fields: [userId], references: [id])

    @@map("sessions")
}

model User {
    id        String    @id
    email     String    @unique
    name      String
    password  String
    createdAt DateTime  @default(now())
    sessions  Session[]

    @@map("users")
}

enum DocumentCategory {
    MANUSCRIPT
    PRINT
    IMAGE
}

enum EventType {
    EARTHQUAKE
    FLOOD
    HURRICANE
    ERUPTION
    FIRE
    STORM
    DROUGHT
    PLAGUE
    DELUGE
    TORNADO
}
