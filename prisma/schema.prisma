generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

model Place {
  id String @id(map: "Place_pkey") @default(cuid())

  name            String       @unique(map: "Place_name_key")
  latitude        Float?
  longitude       Float?
  countryCode     String?
  events          Event[]
  images          Image[]
  manuscriptsFrom Manuscript[] @relation("sent-from")
  manuscriptsTo   Manuscript[] @relation("received-to")
  prints          Print[]

  @@map("places")
}

model Event {
  id String @id @default(cuid())

  year        Int?
  type        EventType
  placeId     String
  place       Place        @relation(fields: [placeId], references: [id])
  images      Image[]
  manuscripts Manuscript[]
  prints      Print[]

  @@unique([year, type, placeId])
  @@map("events")
}

model DocumentData {
  id   String           @id
  type DocumentCategory

  image        Image?      @relation(fields: [imageId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  imageId      String?
  manuscript   Manuscript? @relation(fields: [manuscriptId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  manuscriptId String?
  print        Print?      @relation(fields: [printId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  printId      String?
}

model Image {
  id String @id @default(cuid())

  artist  String?
  author  String?
  title   String?
  museum  String?
  content String?
  date    String?

  summary String?
  link    String?

  event   Event?  @relation(fields: [eventId], references: [id])
  eventId String?

  place   Place?  @relation(fields: [placeId], references: [id])
  placeId String?

  // Contains the ids of associated documents
  associatedDocuments DocumentData[]

  @@map("images")
}

model Manuscript {
  id String @id @default(cuid())

  author    String?
  recipient String?
  language  String?

  summary String?
  link    String?
  archive String?

  writtenAt  String?
  receivedAt String?

  from        Place?  @relation("sent-from", fields: [fromPlaceId], references: [id])
  fromPlaceId String?
  to          Place?  @relation("received-to", fields: [toPlaceId], references: [id])
  toPlaceId   String?

  event   Event?  @relation(fields: [eventId], references: [id])
  eventId String?

  associatedDocuments DocumentData[]

  @@map("manuscripts")
}

model Print {
  id String @id @default(cuid())

  language    String?
  title       String?
  year        String?
  notes       String?
  USTC        String?
  writer      String?
  information String?
  dedicatee   String?

  summary String?
  author  String?
  link    String?

  event   Event?  @relation(fields: [eventId], references: [id])
  eventId String?

  placeId String?
  place   Place?  @relation(fields: [placeId], references: [id])

  otherPlaces String[]

  associatedDocuments DocumentData[]

  @@map("prints")
}

enum DocumentCategory {
  MANUSCRIPT
  PRINT
  IMAGE
}

enum EventType {
  EARTHQUAKE
  FLOOD
  HURRICANE
  ERUPTION
  FIRE
  STORM
  DROUGHT
  PLAGUE
  DELUGE
  TORNADO
}
